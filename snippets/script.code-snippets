{
    /**
     * Vue3.0 & ES6
     */
    "importApi": {
        "prefix": "importApi‚ö°",
        "body": ["import { ${2:IGetList} } from '@/api/${1:home}'"],
        "description": "importApi"
    },

    "importComponents": {
        "prefix": "importComponents‚ö°",
        "body": ["import ${2:MyComponents} from '@/components/${1:MyComponents}/index.vue'"],
        "description": "importComponents"
    },

    "props": {
        "prefix": "props‚ö°",
        "body": ["import { PropType } from 'vue'", "", "const props = defineProps({", "    data: {", "        type: String,", "        default: ''", "    }", "})"],
        "description": "props"
    },

    "propsType": {
        "prefix": "propsType‚ö°",
        "body": [
            "import { PropType } from 'vue'",
            "",
            "interface Data {",
            "    name: string",
            "    value: string",
            "}",
            "",
            "const props = defineProps({",
            "    data: {",
            "        type: Array as PropType<Data[]>,",
            "        default: () => []",
            "    }",
            "})"
        ],
        "description": "propsType"
    },

    "emits": {
        "prefix": "emits‚ö°",
        "body": ["interface EmitsType {", "    (e: 'update:modelValue', value: String): void", "}", "", "const emit = defineEmits<EmitsType>()"],
        "description": "emits"
    },

    "modelValue": {
        "prefix": "modelValue‚ö°",
        "body": [
            "import { computed } from 'vue'",
            "",
            "interface EmitsType {",
            "    (e: 'update:modelValue', value: String): void",
            "}",
            "",
            "const emit = defineEmits<EmitsType>()",
            "",
            "const props = defineProps({",
            "    modelValue: {",
            "        type: String,",
            "        default: ''",
            "    }",
            "})",
            "",
            "const value = computed({",
            "    get: () => props.modelValue,",
            "    set: (val) => {",
            "        emit('update:modelValue', val)",
            "    }",
            "})"
        ],
        "description": "modelValue"
    },

    "forEach": {
        "prefix": "forEach‚ö°",
        "body": ["forEach((x: any) => {$1})"],
        "description": "forEach"
    },

    "map": {
        "prefix": "map‚ö°",
        "body": ["map((x: any) => {$1})"],
        "description": "map"
    },

    /**
     * Rules Ë°®ÂçïËßÑÂàô
     */
    "Rules Ë°®ÂçïËßÑÂàô": {
        "prefix": "rulesüå±",
        "body": [
            "const rules = reactive({",
            "    field1: [{ required: true, message: 'ËØ∑ËæìÂÖ•', trigger: 'blur' }],",
            "    field2: [{ required: true, message: 'ËØ∑ÈÄâÊã©', trigger: 'change' }]",
            "})"
        ],
        "description": "Rules Ë°®ÂçïËßÑÂàô"
    }
}
